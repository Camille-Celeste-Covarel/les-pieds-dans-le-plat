import startServer from "./app";
import { LogLevel, cleanOldLogs } from "./tools/logger";

// R√©cup√©rer le port depuis les variables d'environnement
const port = process.env.PORT;

// V√©rification cruciale pour s'assurer que le port est d√©fini
if (!port) {
  console.error(
    "ERREUR FATALE : La variable d'environnement PORT n'est pas d√©finie.",
    LogLevel.CRITICAL,
  );
  process.exit(1);
}

cleanOldLogs();

// Fonction principale pour d√©marrer l'application
async function main() {
  // 1. On pr√©pare l'application Express comme d'habitude.
  const expressApp = await startServer();

  // 2. On utilise notre service pour cr√©er un serveur unifi√© (HTTP + WebSocket).
  const httpServer = expressApp;

  // On transforme l'appel √† app.listen en une promesse pour pouvoir l'attendre.
  // Cela garantit que le script ne se termine pas avant que le serveur ne soit
  // r√©ellement en √©coute, et nous permet de capturer les erreurs de d√©marrage.
  await new Promise<void>((resolve, reject) => {
    // 3. On d√©marre le serveur unifi√©.
    const runningServer = httpServer.listen(port, () => {
      console.log(
        `üöÄ HTTP & WebSocket server listening on port ${port}`,
        LogLevel.INFO,
      );
      // Le serveur est pr√™t, on peut r√©soudre la promesse.
      resolve();
    });

    // Gestionnaire pour les erreurs de d√©marrage du serveur (ex: port d√©j√† utilis√©)
    runningServer.on("error", (error) => {
      reject(error);
    });
  });
}

// On ex√©cute la fonction principale et on intercepte les erreurs potentielles
// qui pourraient survenir durant toute la phase de d√©marrage.
// Ceci r√©sout l'avertissement "Promise returned from main is ignored".
main().catch((error) => {
  console.error(
    "Erreur fatale lors du d√©marrage de l'application:",
    error,
    LogLevel.CRITICAL,
  );
  process.exit(1);
});
